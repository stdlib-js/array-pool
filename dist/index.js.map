{
  "version": 3,
  "sources": ["../lib/defaults.js", "../lib/validate.js", "../lib/pool.js", "../lib/bytes_per_element.json", "../lib/factory.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'highWaterMark': 9007199254740992\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.highWaterMark] - maximum total memory which can be allocated\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'highWaterMark': 1024\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegativeInteger( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initializes a cache for pooled typed array buffers.\n*\n* @private\n* @param {NonNegativeInteger} n - base-2 logarithm of the maximum typed array size\n* @returns {ArrayArray} initialized cache\n*/\nfunction pool( n ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < n+1; i++ ) {\n\t\tout.push( [] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pool;\n", "{\n\t\"bool\": 1,\n\t\"float64\": 8,\n\t\"float32\": 4,\n\t\"int16\": 2,\n\t\"int32\": 4,\n\t\"int8\": 1,\n\t\"uint16\": 2,\n\t\"uint32\": 4,\n\t\"uint8\": 1,\n\t\"uint8c\": 1,\n  \"complex64\": 8,\n  \"complex128\": 16\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isArrayBuffer = require( '@stdlib/assert-is-arraybuffer' );\nvar isComplexDataType = require( '@stdlib/array-base-assert-is-complex-floating-point-data-type' );\nvar isComplex64Array = require( '@stdlib/assert-is-complex64array' );\nvar isComplex128Array = require( '@stdlib/assert-is-complex128array' );\nvar isBooleanArray = require( '@stdlib/assert-is-booleanarray' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar ctors = require( '@stdlib/array-typed-ctors' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar resolveGetter = require( '@stdlib/array-base-resolve-getter' );\nvar resolveSetter = require( '@stdlib/array-base-resolve-setter' );\nvar ARRAY_DEFAULTS = require( '@stdlib/array-defaults' );\nvar format = require( '@stdlib/string-format' );\nvar ArrayBuffer = require( '@stdlib/array-buffer' );\nvar ceil = require( '@stdlib/math-base-special-ceil' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar ceil2 = require( '@stdlib/math-base-special-ceil2' );\nvar log2 = require( '@stdlib/math-base-special-log2' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar createPool = require( './pool.js' );\nvar BYTES_PER_ELEMENT = require( './bytes_per_element.json' );\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = ARRAY_DEFAULTS.get( 'dtypes.default' );\nvar Complex64Array = ctors( 'complex64' );\nvar Complex128Array = ctors( 'complex128' );\nvar BooleanArray = ctors( 'bool' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an array is a single-precision complex floating-point number array.\n*\n* @private\n* @param {Collection} arr - input array\n* @returns {boolean} boolean indicating whether an input array is a single-precision complex floating-point number array\n*/\nfunction isCmplx64Array( arr ) {\n\treturn ( arr instanceof Complex64Array );\n}\n\n/**\n* Tests whether an array is a double-precision complex floating-point number array.\n*\n* @private\n* @param {Collection} arr - input array\n* @returns {boolean} boolean indicating whether an input array is a double-precision complex floating-point number array\n*/\nfunction isCmplx128Array( arr ) {\n\treturn ( arr instanceof Complex128Array );\n}\n\n/**\n* Tests whether an array is a boolean array.\n*\n* @private\n* @param {Collection} arr - input array\n* @returns {boolean} boolean indicating whether an input array is a boolean array\n*/\nfunction isBoolArray( arr ) {\n\treturn ( arr instanceof BooleanArray );\n}\n\n\n// MAIN //\n\n/**\n* Creates a typed array pool.\n*\n* @param {Options} [options] - pool options\n* @param {NonNegativeInteger} [options.highWaterMark] - maximum total memory which can be allocated\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} allocator\n*\n* @example\n* var typedarraypool = factory();\n*\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\nfunction factory( options ) {\n\tvar nbytes;\n\tvar pool;\n\tvar opts;\n\tvar err;\n\n\topts = defaults();\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tpool = createPool( ceil( log2( opts.highWaterMark ) ) );\n\tnbytes = 0;\n\n\tsetReadOnly( malloc, 'malloc', malloc ); // circular reference\n\tsetReadOnly( malloc, 'calloc', calloc );\n\tsetReadOnly( malloc, 'free', free );\n\tsetReadOnly( malloc, 'clear', clear );\n\tsetReadOnly( malloc, 'highWaterMark', opts.highWaterMark );\n\tsetReadOnlyAccessor( malloc, 'nbytes', getBytes );\n\n\treturn malloc;\n\n\t/**\n\t* Returns the number of allocated bytes.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} number of allocated bytes\n\t*/\n\tfunction getBytes() {\n\t\treturn nbytes;\n\t}\n\n\t/**\n\t* Returns an array buffer.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} n - number of bytes\n\t* @returns {(ArrayBuffer|null)} array buffer or null\n\t*/\n\tfunction arraybuffer( n ) {\n\t\tvar buf;\n\t\tvar i;\n\n\t\t// Convert the number of bytes to an index in our pool table:\n\t\ti = log2( n );\n\n\t\t// If we already have an available array buffer, use it...\n\t\tif ( i < pool.length && pool[ i ].length ) {\n\t\t\treturn pool[ i ].pop();\n\t\t}\n\t\t// Before allocating a new array buffer, ensure that we have not exceeded the maximum number of bytes we are allowed to allocate...\n\t\tif ( nbytes+n > opts.highWaterMark ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf = new ArrayBuffer( n );\n\n\t\t// Update the running counter of allocated bytes:\n\t\tnbytes += n;\n\n\t\treturn buf;\n\t}\n\n\t/**\n\t* Returns a typed array.\n\t*\n\t* @private\n\t* @param {Function} ctor - typed array constructor\n\t* @param {NonNegativeInteger} len - view length\n\t* @param {string} dtype - data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction typedarray( ctor, len, dtype ) {\n\t\tvar buf;\n\t\tif ( len === 0 ) {\n\t\t\treturn new ctor( 0 );\n\t\t}\n\t\tbuf = arraybuffer( ceil2( len )*BYTES_PER_ELEMENT[ dtype ] );\n\t\tif ( buf === null ) {\n\t\t\treturn buf;\n\t\t}\n\t\treturn new ctor( buf, 0, len );\n\t}\n\n\t/**\n\t* Returns an uninitialized typed array.\n\t*\n\t* ## Notes\n\t*\n\t* -   Memory is **not** initialized.\n\t* -   Memory is lazily allocated.\n\t* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n\t*\n\t* @private\n\t* @param {(NonNegativeInteger|Collection)} [arg] - an array length or an array-like object\n\t* @param {string} [dtype=\"float64\"] - data type\n\t* @throws {TypeError} must provide a valid array length or an array-like object\n\t* @throws {TypeError} must provide a recognized data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction malloc() {\n\t\tvar nargs;\n\t\tvar dtype;\n\t\tvar ctor;\n\t\tvar arr;\n\t\tvar out;\n\t\tvar set;\n\t\tvar get;\n\t\tvar len;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs && isString( arguments[ nargs-1 ] ) ) {\n\t\t\tnargs -= 1;\n\t\t\tdtype = arguments[ nargs ];\n\t\t} else {\n\t\t\tdtype = DEFAULT_DTYPE;\n\t\t}\n\t\tctor = ctors( dtype );\n\t\tif ( ctor === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a recognized data type. Value: `%s`.', dtype ) );\n\t\t}\n\t\tif ( nargs <= 0 ) {\n\t\t\treturn new ctor( 0 );\n\t\t}\n\t\t// Check if provided a typed array length...\n\t\tif ( isNonNegativeInteger( arguments[ 0 ] ) ) {\n\t\t\treturn typedarray( ctor, arguments[ 0 ], dtype );\n\t\t}\n\t\t// Check if provided an array-like object containing data elements...\n\t\tif ( isCollection( arguments[ 0 ] ) ) {\n\t\t\tarr = arguments[ 0 ];\n\t\t\tlen = arr.length;\n\t\t\tif ( isComplex128Array( arr ) ) {\n\t\t\t\tarr = reinterpret128( arr, 0 );\n\t\t\t} else if ( isComplex64Array( arr ) ) {\n\t\t\t\tarr = reinterpret64( arr, 0 );\n\t\t\t} else if ( isBooleanArray( arr ) ) {\n\t\t\t\tarr = reinterpretBoolean( arr, 0 );\n\t\t\t} else if ( isComplexDataType( dtype ) ) {\n\t\t\t\t// Assume we've been provided an array of interleaved real and imaginary components...\n\t\t\t\tlen /= 2;\n\t\t\t}\n\t\t\tout = typedarray( ctor, len, dtype );\n\t\t\tif ( out === null ) {\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tif ( isCmplx128Array( out ) || isCmplx64Array( out ) || isBoolArray( out ) ) {\n\t\t\t\tout.set( arr );\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\t// Resolve element accessors in order to account for the possibility that `arr` is a complex number array. As we don't prohibit other \"unsafe\" casts (e.g., providing a `Float64Array` and specifying a `dtype` of `uint8`), we don't prohibit providing a complex number array and specifying a real `dtype`. The results will probably be unexpected/gibberish, but I am not sure we should be overly pedantic in ensuring users don't do ill-advised things...\n\t\t\tget = resolveGetter( arr );\n\t\t\tset = resolveSetter( out );\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tset( out, i, get( arr, i ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array length or an array-like object. Value: `%s`.', arguments[ 0 ] ) );\n\t}\n\n\t/**\n\t* Returns a zero-initialized typed array.\n\t*\n\t* ## Notes\n\t*\n\t* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} [len=0] - array length\n\t* @param {string} [dtype=\"float64\"] - data type\n\t* @throws {TypeError} must provide a valid array length\n\t* @throws {TypeError} must provide a recognized data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction calloc() {\n\t\tvar nargs;\n\t\tvar out;\n\t\tvar tmp;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs === 0 ) {\n\t\t\tout = malloc();\n\t\t} else if ( nargs === 1 ) {\n\t\t\tout = malloc( arguments[ 0 ] );\n\t\t} else {\n\t\t\tout = malloc( arguments[ 0 ], arguments[ 1 ] );\n\t\t}\n\t\tif ( out !== null ) {\n\t\t\t// Initialize the memory...\n\t\t\tif ( isCmplx128Array( out ) ) {\n\t\t\t\ttmp = reinterpret128( out, 0 );\n\t\t\t} else if ( isCmplx64Array( out ) ) {\n\t\t\t\ttmp = reinterpret64( out, 0 );\n\t\t\t} else if ( isBoolArray( out ) ) {\n\t\t\t\ttmp = reinterpretBoolean( out, 0 );\n\t\t\t} else {\n\t\t\t\ttmp = out;\n\t\t\t}\n\t\t\tfor ( i = 0; i < tmp.length; i++ ) {\n\t\t\t\ttmp[ i ] = 0.0;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Frees a typed array or typed array buffer.\n\t*\n\t* ## Notes\n\t*\n\t* -   Implicitly, we support providing non-internally allocated arrays and array buffer (e.g., \"freeing\" a typed array allocated in userland); however, the freed array buffer is likely to have excess capacity when compared to other members in its pool.\n\t*\n\t* @private\n\t* @param {(TypedArray|ArrayBuffer)} buf - typed array or array buffer to free\n\t* @throws {TypeError} must provide a typed array or typed array buffer\n\t* @returns {boolean} boolean indicating whether the typed array or array buffer was successfully freed\n\t*/\n\tfunction free( buf ) {\n\t\tvar n;\n\t\tvar p;\n\t\tvar i;\n\t\tif ( isTypedArrayLike( buf ) && buf.buffer ) {\n\t\t\tbuf = buf.buffer;\n\t\t} else if ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a typed array or ArrayBuffer. Value: `%s`.', buf ) );\n\t\t}\n\t\tif ( buf.byteLength > 0 ) {\n\t\t\tn = floor( log2( buf.byteLength ) );\n\n\t\t\t// Prohibit \"freeing\" array buffers which would potentially allow users to circumvent high water mark limits:\n\t\t\tn = min( pool.length-1, n );\n\n\t\t\t// Ensure that we do not attempt to free the same buffer more than once...\n\t\t\tp = pool[ n ];\n\t\t\tfor ( i = 0; i < p.length; i++ ) {\n\t\t\t\tif ( p[ i ] === buf ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add the buffer to our pool of free buffers:\n\t\t\tp.push( buf );\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Clears the typed array pool allowing garbage collection of previously allocated (and currently free) array buffers.\n\t*\n\t* @private\n\t*/\n\tfunction clear() {\n\t\tvar i;\n\t\tfor ( i = 0; i < pool.length; i++ ) {\n\t\t\tpool[ i ].length = 0;\n\t\t}\n\t\tnbytes = 0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an uninitialized typed array.\n*\n* ## Notes\n*\n* -   Memory is **not** initialized.\n* -   Memory is lazily allocated.\n* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n*\n* @name typedarraypool\n* @type {Function}\n* @param {(NonNegativeInteger|ArrayLikeObject)} [arg] - an array length or an array-like object\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} must provide a valid array length or an array-like object\n* @throws {TypeError} must provide a recognized data type\n* @returns {(TypedArray|null)} typed array or null\n*\n* @example\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // e.g., returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\nvar typedarraypool = factory();\n\n\n// EXPORTS //\n\nmodule.exports = typedarraypool;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array pool.\n*\n* @module @stdlib/array-pool\n*\n* @example\n* var typedarraypool = require( '@stdlib/array-pool' );\n*\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "defaults", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_pool", "__commonJSMin", "exports", "module", "pool", "out", "i", "require_bytes_per_element", "__commonJSMin", "exports", "module", "require_factory", "__commonJSMin", "exports", "module", "isString", "isNonNegativeInteger", "isCollection", "isTypedArrayLike", "isArrayBuffer", "isComplexDataType", "isComplex64Array", "isComplex128Array", "isBooleanArray", "setReadOnly", "setReadOnlyAccessor", "ctors", "reinterpret64", "reinterpret128", "reinterpretBoolean", "resolveGetter", "resolveSetter", "ARRAY_DEFAULTS", "format", "ArrayBuffer", "ceil", "floor", "ceil2", "log2", "min", "defaults", "validate", "createPool", "BYTES_PER_ELEMENT", "DEFAULT_DTYPE", "Complex64Array", "Complex128Array", "BooleanArray", "isCmplx64Array", "arr", "isCmplx128Array", "isBoolArray", "factory", "options", "nbytes", "pool", "opts", "err", "malloc", "calloc", "free", "clear", "getBytes", "arraybuffer", "n", "buf", "i", "typedarray", "ctor", "len", "dtype", "nargs", "out", "set", "get", "tmp", "p", "require_main", "__commonJSMin", "exports", "module", "factory", "typedarraypool", "setReadOnly", "main", "factory"]
}
