{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/pool.js","../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.highWaterMark] - maximum total memory which can be allocated\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'highWaterMark': 1024\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegativeInteger( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initializes a cache for pooled typed array buffers.\n*\n* @private\n* @param {NonNegativeInteger} n - base-2 logarithm of the maximum typed array size\n* @returns {ArrayArray} initialized cache\n*/\nfunction pool( n ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < n+1; i++ ) {\n\t\tout.push( [] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isArrayBuffer = require( '@stdlib/assert-is-arraybuffer' );\nvar isComplex64Array = require( '@stdlib/assert-is-complex64array' );\nvar isComplex128Array = require( '@stdlib/assert-is-complex128array' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar ctors = require( '@stdlib/array-typed-ctors' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar format = require( '@stdlib/string-format' );\nvar copy = require( '@stdlib/utils-copy' );\nvar ArrayBuffer = require( '@stdlib/array-buffer' );\nvar ceil = require( '@stdlib/math-base-special-ceil' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar ceil2 = require( '@stdlib/math-base-special-ceil2' );\nvar log2 = require( '@stdlib/math-base-special-log2' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar createPool = require( './pool.js' );\nvar BYTES_PER_ELEMENT = require( './bytes_per_element.json' );\n\n\n// VARIABLES //\n\nvar Complex64Array = ctors( 'complex64' );\nvar Complex128Array = ctors( 'complex128' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an array is a single-precision complex floating-point number array.\n*\n* @private\n* @param {Collection} arr - input array\n* @returns {boolean} boolean indicating whether an input array is a single-precision complex floating-point number array\n*/\nfunction isCmplx64Array( arr ) {\n\treturn ( arr instanceof Complex64Array );\n}\n\n/**\n* Tests whether an array is a double-precision complex floating-point number array.\n*\n* @private\n* @param {Collection} arr - input array\n* @returns {boolean} boolean indicating whether an input array is a double-precision complex floating-point number array\n*/\nfunction isCmplx128Array( arr ) {\n\treturn ( arr instanceof Complex128Array );\n}\n\n\n// MAIN //\n\n/**\n* Creates a typed array pool.\n*\n* @param {Options} [options] - pool options\n* @param {NonNegativeInteger} [options.highWaterMark] - maximum total memory which can be allocated\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} allocator\n*\n* @example\n* var typedarraypool = factory();\n*\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\nfunction factory( options ) {\n\tvar nbytes;\n\tvar pool;\n\tvar opts;\n\tvar err;\n\n\topts = copy( defaults );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tpool = createPool( ceil( log2( opts.highWaterMark ) ) );\n\tnbytes = 0;\n\n\tsetReadOnly( malloc, 'malloc', malloc ); // circular reference\n\tsetReadOnly( malloc, 'calloc', calloc );\n\tsetReadOnly( malloc, 'free', free );\n\tsetReadOnly( malloc, 'clear', clear );\n\tsetReadOnly( malloc, 'highWaterMark', opts.highWaterMark );\n\tsetReadOnlyAccessor( malloc, 'nbytes', getBytes );\n\n\treturn malloc;\n\n\t/**\n\t* Returns the number of allocated bytes.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} number of allocated bytes\n\t*/\n\tfunction getBytes() {\n\t\treturn nbytes;\n\t}\n\n\t/**\n\t* Returns an array buffer.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} n - number of bytes\n\t* @returns {(ArrayBuffer|null)} array buffer or null\n\t*/\n\tfunction arraybuffer( n ) {\n\t\tvar buf;\n\t\tvar i;\n\n\t\t// Convert the number of bytes to an index in our pool table:\n\t\ti = log2( n );\n\n\t\t// If we already have an available array buffer, use it...\n\t\tif ( i < pool.length && pool[ i ].length ) {\n\t\t\treturn pool[ i ].pop();\n\t\t}\n\t\t// Before allocating a new array buffer, ensure that we have not exceeded the maximum number of bytes we are allowed to allocate...\n\t\tif ( nbytes+n > opts.highWaterMark ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf = new ArrayBuffer( n );\n\n\t\t// Update the running counter of allocated bytes:\n\t\tnbytes += n;\n\n\t\treturn buf;\n\t}\n\n\t/**\n\t* Returns a typed array.\n\t*\n\t* @private\n\t* @param {Function} ctor - typed array constructor\n\t* @param {NonNegativeInteger} len - view length\n\t* @param {string} dtype - data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction typedarray( ctor, len, dtype ) {\n\t\tvar buf;\n\t\tif ( len === 0 ) {\n\t\t\treturn new ctor( 0 );\n\t\t}\n\t\tbuf = arraybuffer( ceil2( len )*BYTES_PER_ELEMENT[ dtype ] );\n\t\tif ( buf === null ) {\n\t\t\treturn buf;\n\t\t}\n\t\treturn new ctor( buf, 0, len );\n\t}\n\n\t/**\n\t* Returns an uninitialized typed array.\n\t*\n\t* ## Notes\n\t*\n\t* -   Memory is **not** initialized.\n\t* -   Memory is lazily allocated.\n\t* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n\t*\n\t* @private\n\t* @param {(NonNegativeInteger|Collection)} [arg] - an array length or an array-like object\n\t* @param {string} [dtype=\"float64\"] - data type\n\t* @throws {TypeError} must provide a valid array length or an array-like object\n\t* @throws {TypeError} must provide a recognized data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction malloc() {\n\t\tvar nargs;\n\t\tvar dtype;\n\t\tvar ctor;\n\t\tvar arr;\n\t\tvar out;\n\t\tvar set;\n\t\tvar get;\n\t\tvar len;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs && isString( arguments[ nargs-1 ] ) ) {\n\t\t\tnargs -= 1;\n\t\t\tdtype = arguments[ nargs ];\n\t\t} else {\n\t\t\tdtype = 'float64';\n\t\t}\n\t\tctor = ctors( dtype );\n\t\tif ( ctor === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a recognized data type. Value: `%s`.', dtype ) );\n\t\t}\n\t\tif ( nargs <= 0 ) {\n\t\t\treturn new ctor( 0 );\n\t\t}\n\t\t// Check if provided a typed array length...\n\t\tif ( isNonNegativeInteger( arguments[ 0 ] ) ) {\n\t\t\treturn typedarray( ctor, arguments[ 0 ], dtype );\n\t\t}\n\t\t// Check if provided an array-like object containing data elements...\n\t\tif ( isCollection( arguments[ 0 ] ) ) {\n\t\t\tarr = arguments[ 0 ];\n\t\t\tlen = arr.length;\n\t\t\tif ( isComplex128Array( arr ) ) {\n\t\t\t\tarr = reinterpret128( arr, 0 );\n\t\t\t} else if ( isComplex64Array( arr ) ) {\n\t\t\t\tarr = reinterpret64( arr, 0 );\n\t\t\t} else if ( /^complex/.test( dtype ) ) {\n\t\t\t\t// Assume we've been provided an array of interleaved real and imaginary components...\n\t\t\t\tlen /= 2;\n\t\t\t}\n\t\t\tout = typedarray( ctor, len, dtype );\n\t\t\tif ( out === null ) {\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tif ( isCmplx128Array( out ) || isCmplx64Array( out ) ) {\n\t\t\t\tout.set( arr );\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\t// Wrap the arrays in order to account for the possibility that `arr` is a complex number array. As we don't prohibit other \"unsafe\" casts (e.g., providing a `Float64Array` and specifying a `dtype` of `uint8`), we don't prohibit providing a complex number array and specifying a real `dtype`. The results will probably be unexpected/gibberish, but I am not sure we should be overly pedantic in ensuring user's don't do ill-advised things...\n\t\t\tget = arraylike2object( arr ).getter;\n\t\t\tset = arraylike2object( out ).setter;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tset( out, i, get( arr, i ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array length or an array-like object. Value: `%s`.', arguments[ 0 ] ) );\n\t}\n\n\t/**\n\t* Returns a zero-initialized typed array.\n\t*\n\t* ## Notes\n\t*\n\t* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} [len=0] - array length\n\t* @param {string} [dtype=\"float64\"] - data type\n\t* @throws {TypeError} must provide a valid array length\n\t* @throws {TypeError} must provide a recognized data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction calloc() {\n\t\tvar nargs;\n\t\tvar out;\n\t\tvar tmp;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs === 0 ) {\n\t\t\tout = malloc();\n\t\t} else if ( nargs === 1 ) {\n\t\t\tout = malloc( arguments[ 0 ] );\n\t\t} else {\n\t\t\tout = malloc( arguments[ 0 ], arguments[ 1 ] );\n\t\t}\n\t\tif ( out !== null ) {\n\t\t\t// Initialize the memory...\n\t\t\tif ( isCmplx128Array( out ) ) {\n\t\t\t\ttmp = reinterpret128( out, 0 );\n\t\t\t} else if ( isCmplx64Array( out ) ) {\n\t\t\t\ttmp = reinterpret64( out, 0 );\n\t\t\t} else {\n\t\t\t\ttmp = out;\n\t\t\t}\n\t\t\tfor ( i = 0; i < tmp.length; i++ ) {\n\t\t\t\ttmp[ i ] = 0.0;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Frees a typed array or typed array buffer.\n\t*\n\t* ## Notes\n\t*\n\t* -   Implicitly, we support providing non-internally allocated arrays and array buffer (e.g., \"freeing\" a typed array allocated in userland); however, the freed array buffer is likely to have excess capacity when compared to other members in its pool.\n\t*\n\t* @private\n\t* @param {(TypedArray|ArrayBuffer)} buf - typed array or array buffer to free\n\t* @throws {TypeError} must provide a typed array or typed array buffer\n\t* @returns {boolean} boolean indicating whether the typed array or array buffer was successfully freed\n\t*/\n\tfunction free( buf ) {\n\t\tvar n;\n\t\tvar p;\n\t\tvar i;\n\t\tif ( isTypedArrayLike( buf ) && buf.buffer ) {\n\t\t\tbuf = buf.buffer;\n\t\t} else if ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a typed array or typed array buffer. Value: `%s`.', buf ) );\n\t\t}\n\t\tif ( buf.byteLength > 0 ) {\n\t\t\tn = floor( log2( buf.byteLength ) );\n\n\t\t\t// Prohibit \"freeing\" array buffers which would potentially allow users to circumvent high water mark limits:\n\t\t\tn = min( pool.length-1, n );\n\n\t\t\t// Ensure that we do not attempt to free the same buffer more than once...\n\t\t\tp = pool[ n ];\n\t\t\tfor ( i = 0; i < p.length; i++ ) {\n\t\t\t\tif ( p[ i ] === buf ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add the buffer to our pool of free buffers:\n\t\t\tp.push( buf );\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Clears the typed array pool allowing garbage collection of previously allocated (and currently free) array buffers.\n\t*\n\t* @private\n\t*/\n\tfunction clear() {\n\t\tvar i;\n\t\tfor ( i = 0; i < pool.length; i++ ) {\n\t\t\tpool[ i ].length = 0;\n\t\t}\n\t\tnbytes = 0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array pool.\n*\n* @module @stdlib/array-pool\n*\n* @example\n* var typedarraypool = require( '@stdlib/array-pool' );\n*\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an uninitialized typed array.\n*\n* ## Notes\n*\n* -   Memory is **not** initialized.\n* -   Memory is lazily allocated.\n* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n*\n* @name typedarraypool\n* @type {Function}\n* @param {(NonNegativeInteger|ArrayLikeObject)} [arg] - an array length or an array-like object\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} must provide a valid array length or an array-like object\n* @throws {TypeError} must provide a recognized data type\n* @returns {(TypedArray|null)} typed array or null\n*\n* @example\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // e.g., returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\nvar typedarraypool = factory();\n\n\n// EXPORTS //\n\nmodule.exports = typedarraypool;\n"],"names":["isObject","require$$0","hasOwnProp","require$$1","isNonNegativeInteger","require$$2","isPrimitive","format","require$$3","validate_1","opts","options","highWaterMark","TypeError","pool_1","n","out","i","push","isString","isCollection","isTypedArrayLike","isArrayBuffer","require$$4","isComplex64Array","require$$5","isComplex128Array","require$$6","setReadOnly","require$$7","setReadOnlyAccessor","require$$8","ctors","require$$9","reinterpret64","require$$10","reinterpret128","require$$11","arraylike2object","require$$12","require$$13","copy","require$$14","ArrayBuffer","require$$15","ceil","require$$16","floor","require$$17","ceil2","require$$18","log2","require$$19","min","require$$20","defaults","require$$21","validate","require$$22","createPool","require$$23","BYTES_PER_ELEMENT","require$$24","Complex64Array","Complex128Array","isCmplx64Array","arr","isCmplx128Array","factory_1","nbytes","pool","err","arguments","length","malloc","calloc","free","clear","getBytes","arraybuffer","buf","pop","typedarray","ctor","len","dtype","nargs","set","get","test","getter","setter","tmp","p","buffer","byteLength","main","factory","lib"],"mappings":"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"}