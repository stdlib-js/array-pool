{"version":3,"file":"index.mjs","sources":["../lib/factory.js","../lib/defaults.js","../lib/validate.js","../lib/pool.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isComplexDataType from '@stdlib/array-base-assert-is-complex-floating-point-data-type';\nimport isComplex64Array from '@stdlib/assert-is-complex64array';\nimport isComplex128Array from '@stdlib/assert-is-complex128array';\nimport isBooleanArray from '@stdlib/assert-is-booleanarray';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport ctors from '@stdlib/array-typed-ctors';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport resolveGetter from '@stdlib/array-base-resolve-getter';\nimport resolveSetter from '@stdlib/array-base-resolve-setter';\nimport ARRAY_DEFAULTS from '@stdlib/array-defaults';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport ArrayBuffer from '@stdlib/array-buffer';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil2 from '@stdlib/math-base-special-ceil2';\nimport log2 from '@stdlib/math-base-special-log2';\nimport min from '@stdlib/math-base-special-min';\nimport defaults from './defaults.js';\nimport validate from './validate.js';\nimport createPool from './pool.js';\nimport BYTES_PER_ELEMENT from './bytes_per_element.json';\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = ARRAY_DEFAULTS.get( 'dtypes.default' );\nvar Complex64Array = ctors( 'complex64' );\nvar Complex128Array = ctors( 'complex128' );\nvar BooleanArray = ctors( 'bool' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an array is a single-precision complex floating-point number array.\n*\n* @private\n* @param {Collection} arr - input array\n* @returns {boolean} boolean indicating whether an input array is a single-precision complex floating-point number array\n*/\nfunction isCmplx64Array( arr ) {\n\treturn ( arr instanceof Complex64Array );\n}\n\n/**\n* Tests whether an array is a double-precision complex floating-point number array.\n*\n* @private\n* @param {Collection} arr - input array\n* @returns {boolean} boolean indicating whether an input array is a double-precision complex floating-point number array\n*/\nfunction isCmplx128Array( arr ) {\n\treturn ( arr instanceof Complex128Array );\n}\n\n/**\n* Tests whether an array is a boolean array.\n*\n* @private\n* @param {Collection} arr - input array\n* @returns {boolean} boolean indicating whether an input array is a boolean array\n*/\nfunction isBoolArray( arr ) {\n\treturn ( arr instanceof BooleanArray );\n}\n\n\n// MAIN //\n\n/**\n* Creates a typed array pool.\n*\n* @param {Options} [options] - pool options\n* @param {NonNegativeInteger} [options.highWaterMark] - maximum total memory which can be allocated\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} allocator\n*\n* @example\n* var typedarraypool = factory();\n*\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\nfunction factory( options ) {\n\tvar nbytes;\n\tvar pool;\n\tvar opts;\n\tvar err;\n\n\topts = defaults();\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tpool = createPool( ceil( log2( opts.highWaterMark ) ) );\n\tnbytes = 0;\n\n\tsetReadOnly( malloc, 'malloc', malloc ); // circular reference\n\tsetReadOnly( malloc, 'calloc', calloc );\n\tsetReadOnly( malloc, 'free', free );\n\tsetReadOnly( malloc, 'clear', clear );\n\tsetReadOnly( malloc, 'highWaterMark', opts.highWaterMark );\n\tsetReadOnlyAccessor( malloc, 'nbytes', getBytes );\n\n\treturn malloc;\n\n\t/**\n\t* Returns the number of allocated bytes.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} number of allocated bytes\n\t*/\n\tfunction getBytes() {\n\t\treturn nbytes;\n\t}\n\n\t/**\n\t* Returns an array buffer.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} n - number of bytes\n\t* @returns {(ArrayBuffer|null)} array buffer or null\n\t*/\n\tfunction arraybuffer( n ) {\n\t\tvar buf;\n\t\tvar i;\n\n\t\t// Convert the number of bytes to an index in our pool table:\n\t\ti = log2( n );\n\n\t\t// If we already have an available array buffer, use it...\n\t\tif ( i < pool.length && pool[ i ].length ) {\n\t\t\treturn pool[ i ].pop();\n\t\t}\n\t\t// Before allocating a new array buffer, ensure that we have not exceeded the maximum number of bytes we are allowed to allocate...\n\t\tif ( nbytes+n > opts.highWaterMark ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf = new ArrayBuffer( n );\n\n\t\t// Update the running counter of allocated bytes:\n\t\tnbytes += n;\n\n\t\treturn buf;\n\t}\n\n\t/**\n\t* Returns a typed array.\n\t*\n\t* @private\n\t* @param {Function} ctor - typed array constructor\n\t* @param {NonNegativeInteger} len - view length\n\t* @param {string} dtype - data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction typedarray( ctor, len, dtype ) {\n\t\tvar buf;\n\t\tif ( len === 0 ) {\n\t\t\treturn new ctor( 0 );\n\t\t}\n\t\tbuf = arraybuffer( ceil2( len )*BYTES_PER_ELEMENT[ dtype ] );\n\t\tif ( buf === null ) {\n\t\t\treturn buf;\n\t\t}\n\t\treturn new ctor( buf, 0, len );\n\t}\n\n\t/**\n\t* Returns an uninitialized typed array.\n\t*\n\t* ## Notes\n\t*\n\t* -   Memory is **not** initialized.\n\t* -   Memory is lazily allocated.\n\t* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n\t*\n\t* @private\n\t* @param {(NonNegativeInteger|Collection)} [arg] - an array length or an array-like object\n\t* @param {string} [dtype=\"float64\"] - data type\n\t* @throws {TypeError} must provide a valid array length or an array-like object\n\t* @throws {TypeError} must provide a recognized data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction malloc() {\n\t\tvar nargs;\n\t\tvar dtype;\n\t\tvar ctor;\n\t\tvar arr;\n\t\tvar out;\n\t\tvar set;\n\t\tvar get;\n\t\tvar len;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs && isString( arguments[ nargs-1 ] ) ) {\n\t\t\tnargs -= 1;\n\t\t\tdtype = arguments[ nargs ];\n\t\t} else {\n\t\t\tdtype = DEFAULT_DTYPE;\n\t\t}\n\t\tctor = ctors( dtype );\n\t\tif ( ctor === null ) {\n\t\t\tthrow new TypeError( format( '01H2Y', dtype ) );\n\t\t}\n\t\tif ( nargs <= 0 ) {\n\t\t\treturn new ctor( 0 );\n\t\t}\n\t\t// Check if provided a typed array length...\n\t\tif ( isNonNegativeInteger( arguments[ 0 ] ) ) {\n\t\t\treturn typedarray( ctor, arguments[ 0 ], dtype );\n\t\t}\n\t\t// Check if provided an array-like object containing data elements...\n\t\tif ( isCollection( arguments[ 0 ] ) ) {\n\t\t\tarr = arguments[ 0 ];\n\t\t\tlen = arr.length;\n\t\t\tif ( isComplex128Array( arr ) ) {\n\t\t\t\tarr = reinterpret128( arr, 0 );\n\t\t\t} else if ( isComplex64Array( arr ) ) {\n\t\t\t\tarr = reinterpret64( arr, 0 );\n\t\t\t} else if ( isBooleanArray( arr ) ) {\n\t\t\t\tarr = reinterpretBoolean( arr, 0 );\n\t\t\t} else if ( isComplexDataType( dtype ) ) {\n\t\t\t\t// Assume we've been provided an array of interleaved real and imaginary components...\n\t\t\t\tlen /= 2;\n\t\t\t}\n\t\t\tout = typedarray( ctor, len, dtype );\n\t\t\tif ( out === null ) {\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tif ( isCmplx128Array( out ) || isCmplx64Array( out ) || isBoolArray( out ) ) {\n\t\t\t\tout.set( arr );\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\t// Resolve element accessors in order to account for the possibility that `arr` is a complex number array. As we don't prohibit other \"unsafe\" casts (e.g., providing a `Float64Array` and specifying a `dtype` of `uint8`), we don't prohibit providing a complex number array and specifying a real `dtype`. The results will probably be unexpected/gibberish, but I am not sure we should be overly pedantic in ensuring users don't do ill-advised things...\n\t\t\tget = resolveGetter( arr );\n\t\t\tset = resolveSetter( out );\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tset( out, i, get( arr, i ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\tthrow new TypeError( format( '01H2r', arguments[ 0 ] ) );\n\t}\n\n\t/**\n\t* Returns a zero-initialized typed array.\n\t*\n\t* ## Notes\n\t*\n\t* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} [len=0] - array length\n\t* @param {string} [dtype=\"float64\"] - data type\n\t* @throws {TypeError} must provide a valid array length\n\t* @throws {TypeError} must provide a recognized data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction calloc() {\n\t\tvar nargs;\n\t\tvar out;\n\t\tvar tmp;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs === 0 ) {\n\t\t\tout = malloc();\n\t\t} else if ( nargs === 1 ) {\n\t\t\tout = malloc( arguments[ 0 ] );\n\t\t} else {\n\t\t\tout = malloc( arguments[ 0 ], arguments[ 1 ] );\n\t\t}\n\t\tif ( out !== null ) {\n\t\t\t// Initialize the memory...\n\t\t\tif ( isCmplx128Array( out ) ) {\n\t\t\t\ttmp = reinterpret128( out, 0 );\n\t\t\t} else if ( isCmplx64Array( out ) ) {\n\t\t\t\ttmp = reinterpret64( out, 0 );\n\t\t\t} else if ( isBoolArray( out ) ) {\n\t\t\t\ttmp = reinterpretBoolean( out, 0 );\n\t\t\t} else {\n\t\t\t\ttmp = out;\n\t\t\t}\n\t\t\tfor ( i = 0; i < tmp.length; i++ ) {\n\t\t\t\ttmp[ i ] = 0.0;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Frees a typed array or typed array buffer.\n\t*\n\t* ## Notes\n\t*\n\t* -   Implicitly, we support providing non-internally allocated arrays and array buffer (e.g., \"freeing\" a typed array allocated in userland); however, the freed array buffer is likely to have excess capacity when compared to other members in its pool.\n\t*\n\t* @private\n\t* @param {(TypedArray|ArrayBuffer)} buf - typed array or array buffer to free\n\t* @throws {TypeError} must provide a typed array or typed array buffer\n\t* @returns {boolean} boolean indicating whether the typed array or array buffer was successfully freed\n\t*/\n\tfunction free( buf ) {\n\t\tvar n;\n\t\tvar p;\n\t\tvar i;\n\t\tif ( isTypedArrayLike( buf ) && buf.buffer ) {\n\t\t\tbuf = buf.buffer;\n\t\t} else if ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( format( '01H2s', buf ) );\n\t\t}\n\t\tif ( buf.byteLength > 0 ) {\n\t\t\tn = floor( log2( buf.byteLength ) );\n\n\t\t\t// Prohibit \"freeing\" array buffers which would potentially allow users to circumvent high water mark limits:\n\t\t\tn = min( pool.length-1, n );\n\n\t\t\t// Ensure that we do not attempt to free the same buffer more than once...\n\t\t\tp = pool[ n ];\n\t\t\tfor ( i = 0; i < p.length; i++ ) {\n\t\t\t\tif ( p[ i ] === buf ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add the buffer to our pool of free buffers:\n\t\t\tp.push( buf );\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Clears the typed array pool allowing garbage collection of previously allocated (and currently free) array buffers.\n\t*\n\t* @private\n\t*/\n\tfunction clear() {\n\t\tvar i;\n\t\tfor ( i = 0; i < pool.length; i++ ) {\n\t\t\tpool[ i ].length = 0;\n\t\t}\n\t\tnbytes = 0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'highWaterMark': 9007199254740992\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.highWaterMark] - maximum total memory which can be allocated\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'highWaterMark': 1024\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '01H2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegativeInteger( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( '01H2t', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initializes a cache for pooled typed array buffers.\n*\n* @private\n* @param {NonNegativeInteger} n - base-2 logarithm of the maximum typed array size\n* @returns {ArrayArray} initialized cache\n*/\nfunction pool( n ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < n+1; i++ ) {\n\t\tout.push( [] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default pool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Returns an uninitialized typed array.\n*\n* ## Notes\n*\n* -   Memory is **not** initialized.\n* -   Memory is lazily allocated.\n* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n*\n* @name typedarraypool\n* @type {Function}\n* @param {(NonNegativeInteger|ArrayLikeObject)} [arg] - an array length or an array-like object\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} must provide a valid array length or an array-like object\n* @throws {TypeError} must provide a recognized data type\n* @returns {(TypedArray|null)} typed array or null\n*\n* @example\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // e.g., returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\nvar typedarraypool = factory();\n\n\n// EXPORTS //\n\nexport default typedarraypool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array pool.\n*\n* @module @stdlib/array-pool\n*\n* @example\n* import typedarraypool from '@stdlib/array-pool';\n*\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* @example\n* import typedarraypool from '@stdlib/array-pool';\n*\n* // Allocate an array:\n* var arr = typedarraypool( 5, 'float64' );\n*\n* // Modify the array:\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["DEFAULT_DTYPE","ARRAY_DEFAULTS","get","Complex64Array","ctors","Complex128Array","BooleanArray","isCmplx64Array","arr","isCmplx128Array","isBoolArray","factory","options","nbytes","pool","opts","err","highWaterMark","arguments","length","isObject","hasOwnProp","isNonNegativeInteger","TypeError","format","validate","n","out","i","push","createPool","ceil","log2","setReadOnly","malloc","nargs","tmp","reinterpret128","reinterpret64","reinterpretBoolean","buf","p","isTypedArrayLike","buffer","isArrayBuffer","byteLength","floor","min","setReadOnlyAccessor","typedarray","ctor","len","dtype","pop","ArrayBuffer","arraybuffer","ceil2","BYTES_PER_ELEMENT","set","isString","isCollection","isComplex128Array","isComplex64Array","isBooleanArray","isComplexDataType","resolveGetter","resolveSetter","typedarraypool","main"],"mappings":";;wzFAuDIA,EAAgBC,EAAeC,IAAK,kBACpCC,EAAiBC,EAAO,aACxBC,EAAkBD,EAAO,cACzBE,EAAeF,EAAO,QAY1B,SAASG,EAAgBC,GACxB,OAASA,aAAeL,CACzB,CASA,SAASM,EAAiBD,GACzB,OAASA,aAAeH,CACzB,CASA,SAASK,EAAaF,GACrB,OAASA,aAAeF,CACzB,CA6BA,SAASK,EAASC,GACjB,IAAIC,EACAC,EACAC,EACAC,EAGJ,GADAD,EChGO,CACNE,cAAiB,kBDgGbC,UAAUC,SACdH,EElFF,SAAmBD,EAAMH,GACxB,OAAMQ,EAAUR,GAGXS,EAAYT,EAAS,mBACzBG,EAAKE,cAAgBL,EAAQK,eACvBK,EAAsBP,EAAKE,gBACzB,IAAIM,UAAWC,EAAQ,QAAS,gBAAiBT,EAAKE,gBAGxD,KARC,IAAIM,UAAWC,EAAQ,QAASZ,GASzC,CFuEQa,CAAUV,EAAMH,GACjBI,GACJ,MAAMA,EAaR,OAVAF,EG3GD,SAAeY,GACd,IAAIC,EACAC,EAGJ,IADAD,EAAM,GACAC,EAAI,EAAGA,EAAIF,EAAE,EAAGE,IACrBD,EAAIE,KAAM,IAEX,OAAOF,CACR,CHkGQG,CAAYC,EAAMC,EAAMjB,EAAKE,iBACpCJ,EAAS,EAEToB,EAAaC,EAAQ,SAAUA,GAC/BD,EAAaC,EAAQ,UAiKrB,WACC,IAAIC,EACAR,EACAS,EACAR,EAEJO,EAAQjB,UAAUC,OAEjBQ,EADc,IAAVQ,EACED,IACe,IAAVC,EACLD,EAAQhB,UAAW,IAEnBgB,EAAQhB,UAAW,GAAKA,UAAW,IAE1C,GAAa,OAARS,EAWJ,IARCS,EADI3B,EAAiBkB,GACfU,EAAgBV,EAAK,GAChBpB,EAAgBoB,GACrBW,EAAeX,EAAK,GACfjB,EAAaiB,GAClBY,EAAoBZ,EAAK,GAEzBA,EAEDC,EAAI,EAAGA,EAAIQ,EAAIjB,OAAQS,IAC5BQ,EAAKR,GAAM,EAGb,OAAOD,CACP,IA9LDM,EAAaC,EAAQ,QA4MrB,SAAeM,GACd,IAAId,EACAe,EACAb,EACJ,GAAKc,EAAkBF,IAASA,EAAIG,OACnCH,EAAMA,EAAIG,YACJ,IAAMC,EAAeJ,GAC3B,MAAM,IAAIjB,UAAWC,EAAQ,QAASgB,IAEvC,GAAKA,EAAIK,WAAa,EAAI,CAQzB,IAPAnB,EAAIoB,EAAOd,EAAMQ,EAAIK,aAGrBnB,EAAIqB,EAAKjC,EAAKK,OAAO,EAAGO,GAGxBe,EAAI3B,EAAMY,GACJE,EAAI,EAAGA,EAAIa,EAAEtB,OAAQS,IAC1B,GAAKa,EAAGb,KAAQY,EACf,OAAO,EAITC,EAAEZ,KAAMW,EACR,CACD,OAAO,CACP,IArODP,EAAaC,EAAQ,SA4OrB,WACC,IAAIN,EACJ,IAAMA,EAAI,EAAGA,EAAId,EAAKK,OAAQS,IAC7Bd,EAAMc,GAAIT,OAAS,EAEpBN,EAAS,CACT,IAjPDoB,EAAaC,EAAQ,gBAAiBnB,EAAKE,eAC3C+B,EAAqBd,EAAQ,UAU7B,WACC,OAAOrB,CACP,IAVMqB,EAmDP,SAASe,EAAYC,EAAMC,EAAKC,GAC/B,IAAIZ,EACJ,OAAa,IAARW,EACG,IAAID,EAAM,GAGL,QADbV,EArCD,SAAsBd,GACrB,IAAIc,EACAZ,EAMJ,OAHAA,EAAII,EAAMN,IAGDZ,EAAKK,QAAUL,EAAMc,GAAIT,OAC1BL,EAAMc,GAAIyB,MAGbxC,EAAOa,EAAIX,EAAKE,cACb,MAERuB,EAAM,IAAIc,EAAa5B,GAGvBb,GAAUa,EAEHc,EACP,CAgBMe,CAAaC,EAAOL,GAAMM,EAAmBL,KAE3CZ,EAED,IAAIU,EAAMV,EAAK,EAAGW,EACzB,CAkBD,SAASjB,IACR,IAAIC,EACAiB,EACAF,EACA1C,EACAmB,EACA+B,EACAxD,EACAiD,EACAvB,EAUJ,GALCwB,GAHDjB,EAAQjB,UAAUC,SACJwC,EAAUzC,UAAWiB,EAAM,IAEhCjB,UADRiB,GAAS,GAGDnC,EAGK,QADdkD,EAAO9C,EAAOgD,IAEb,MAAM,IAAI7B,UAAWC,EAAQ,QAAS4B,IAEvC,GAAKjB,GAAS,EACb,OAAO,IAAIe,EAAM,GAGlB,GAAK5B,EAAsBJ,UAAW,IACrC,OAAO+B,EAAYC,EAAMhC,UAAW,GAAKkC,GAG1C,GAAKQ,EAAc1C,UAAW,IAAQ,CAcrC,GAZAiC,GADA3C,EAAMU,UAAW,IACPC,OACL0C,EAAmBrD,GACvBA,EAAM6B,EAAgB7B,EAAK,GAChBsD,EAAkBtD,GAC7BA,EAAM8B,EAAe9B,EAAK,GACfuD,EAAgBvD,GAC3BA,EAAM+B,EAAoB/B,EAAK,GACpBwD,EAAmBZ,KAE9BD,GAAO,GAGK,QADbxB,EAAMsB,EAAYC,EAAMC,EAAKC,IAE5B,OAAOzB,EAER,GAAKlB,EAAiBkB,IAASpB,EAAgBoB,IAASjB,EAAaiB,GAEpE,OADAA,EAAI+B,IAAKlD,GACFmB,EAKR,IAFAzB,EAAM+D,EAAezD,GACrBkD,EAAMQ,EAAevC,GACfC,EAAI,EAAGA,EAAIuB,EAAKvB,IACrB8B,EAAK/B,EAAKC,EAAG1B,EAAKM,EAAKoB,IAExB,OAAOD,CACP,CACD,MAAM,IAAIJ,UAAWC,EAAQ,QAASN,UAAW,IACjD,CAoGF,CIxUG,IAACiD,EAAiBxD,ICArBsB,EAAAmC,EAAA,UAAAzD"}